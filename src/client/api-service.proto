syntax = "proto3";

package api;
option go_package = "serviceapi";

// This is the API for MESG Services to interact with MESG Core.
// It is to be consumed only by MESG Services.
// It provides all necessary functions that MESG Services need in order to interact with MESG Core.
//
// This API is only accessible through [gRPC](https://grpc.io/).
//
// Applications must not use this API, but rather use the [Core API](./core.md).
//
// The source file of this API is hosted on [GitHub](https://github.com/mesg-foundation/core/blob/master/api/service/api.proto).
service Service {
  // Emit an event to [Core](../guide/start-here/core.md).
  // The event and its data must be defined in the [service's definition file](../guide/service/service-file.md).
  rpc EmitEvent (EmitEventRequest) returns (EmitEventReply) {}

  // Subscribe to the stream of tasks to execute.
  // Every task received must be executed and its result must be submitted using the `SubmitResult` API.
  rpc ListenTask (ListenTaskRequest) returns (stream TaskData) {}

  // Submit the result of a task's execution to [Core](../guide/start-here/core.md).
  // The result must be defined as a task's output in the [service's definition file](../guide/service/service-file.md).
  rpc SubmitResult (SubmitResultRequest) returns (SubmitResultReply) {}
}

// The request's data for the `EmitEvent` API.
//
// **Example:**
// ```json
// {
//   "token":     "__SERVICE_TOKEN_FROM_ENV__",
//   "eventKey":  "__EVENT_KEY__",
//   "eventData": "{\"foo\":\"hello\",\"bar\":false}"
// }
// ```
message EmitEventRequest {
  string token = 1;     // The service's token given by Core as the environment variable `MESG_TOKEN`.
  string eventKey = 2;  // The event's key as defined in the [service file](../guide/service/service-file.md).
  string eventData = 3; // The event's data encoded in JSON as defined in the [service file](../guide/service/service-file.md).
}

// Reply of `EmitEvent` API doesn't contain any data.
message EmitEventReply {
}

// The request's data for the `ListenTask` stream API.
//
// **Example:**
// ```json
// {
//   "token": "__SERVICE_TOKEN_FROM_ENV__"
// }
// ```
message ListenTaskRequest {
  string token = 1; // The service's token given by the Core as the environment variable `MESG_TOKEN`.
}

// The data received from the stream of the `ListenTask` API.
// The data will be received over time as long as the stream is open.
// The `executionID` value must be kept and sent with the result when calling the [`SubmitResult` API](#submitresult).
//
// **Example:**
// ```json
// {
//   "executionID": "__EXECUTION_ID__",
//   "taskKey":     "__TASK_KEY__",
//   "inputData":   "{\"inputX\":\"Hello world!\",\"inputY\":true}"
// }
// ```
message TaskData {
  string executionID = 1; // The unique identifier of the execution. Must be kept and sent with the result when calling the [`SubmitResult` API](#submitresult).
  string taskKey = 2;     // The key from the task to execute as defined in the [service file](../guide/service/service-file.md).
  string inputData = 3;   // The task's input encoded in JSON as defined in the [service file](../guide/service/service-file.md).
}

// The request's data for the `SubmitResult` API.
// The data must contain the `executionID` of the executed task received from the stream of [`ListenTask` API](#listentask).
//
// **Example:**
// ```json
// {
//   "executionID": "__EXECUTION_ID__",
//   "outputKey":   "__OUTPUT_KEY__",
//   "outputData":  "{\"foo\":\"super result\",\"bar\":true}"
// }
// ```
message SubmitResultRequest {
  string executionID = 1; // The `executionID` received from the [`ListenTask` stream](#listentask).
  string outputKey = 2;   // The output's key as defined in the [service file](../guide/service/service-file.md).
  string outputData = 3;  // The result's data encoded in JSON as defined in the [service file](../guide/service/service-file.md).
}

// Reply of `SubmitResult` API doesn't contain any data.
message SubmitResultReply {
}
